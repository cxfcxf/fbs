plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

android {
    namespace "com.cxfcxf.androidtvfileserver"
    compileSdkVersion 35
    defaultConfig {
        applicationId "com.cxfcxf.androidtvfileserver"
        minSdkVersion 21
        targetSdkVersion 35
        
        // Dynamically set version information
        // Get version from git tag if available, otherwise use default values
        def gitVersionCode = { ->
            try {
                if (project.hasProperty('versionCode')) {
                    return Integer.parseInt(project.property('versionCode'))
                }
                def stdout = new ByteArrayOutputStream()
                exec {
                    commandLine 'git', 'rev-list', '--count', 'HEAD'
                    standardOutput = stdout
                }
                return Integer.parseInt(stdout.toString().trim())
            } catch (ignored) {
                return 1
            }
        }
        
        def gitVersionName = { ->
            try {
                if (project.hasProperty('versionName')) {
                    return project.property('versionName')
                }
                def stdout = new ByteArrayOutputStream()
                exec {
                    commandLine 'git', 'describe', '--tags', '--abbrev=0'
                    standardOutput = stdout
                }
                return stdout.toString().trim().replace("v", "")
            } catch (ignored) {
                return "1.0"
            }
        }
        
        versionCode gitVersionCode()
        versionName gitVersionName()
    }
    
    // Signing config that works with GitHub Actions
    signingConfigs {
        release {
            // Use empty values for local builds or populate with env variables in CI
            storeFile file(System.getenv("KEYSTORE_FILE") ?: "keystore.jks")
            storePassword System.getenv("KEYSTORE_PASSWORD") ?: "android"
            keyAlias System.getenv("KEY_ALIAS") ?: "key0"
            keyPassword System.getenv("KEY_PASSWORD") ?: "android"
        }
    }
    
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    buildFeatures {
        viewBinding true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_21
        targetCompatibility JavaVersion.VERSION_21
    }
    kotlinOptions {
        jvmTarget = '21'
    }
    
    lint {
        abortOnError false
    }
    
    // Custom APK output filename
    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "fbs.apk"
        }
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.9.0'
    implementation 'androidx.leanback:leanback:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.8.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'com.koushikdutta.async:androidasync:2.2.1'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.6.1'
    implementation 'com.google.code.gson:gson:2.10.1'
} 